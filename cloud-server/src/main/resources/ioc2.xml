<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--通过构造器赋值-->
    <bean id="actor" class="com.spring.cloud.server.entity.Actor">
        <constructor-arg name="id" value="123456"></constructor-arg>
        <constructor-arg name="name" value="zhangsan"></constructor-arg>
        <constructor-arg name="age" value="19"></constructor-arg>
    </bean>

    <!--通过构造器赋值-->
    <!--<bean id="actor2" class="com.spring.cloud.server.entity.Actor">-->
       <!--<property name="name" ref="actor"></property>-->
    <!--</bean>-->


    <bean id="actor3" class="com.spring.cloud.server.entity.Actor" parent="actor">
        <property name="name" value="actor"></property>
    </bean>

    <!--
    scope 作用域：
    prototype :多实例        容器启动不会创建对象，只有getBean获取的时候才会创建对象；每次获取都会创建一个实例；
    singleton :单实例（默认） 在容器启动之前就已经创建了对象保存在容器中了；每次获取都调用同一个实例；
    -->

    <!--
    工厂模式：
    静态工厂：直接通过工厂名.方法 调用
    实例工厂：工厂本身需要创建对象；
    -->


</beans>